class window.PinkmanObject extends window.PinkmanCommon

  @pinkmanType: 'object'

  constructor: (args...) ->
    super(args...)
    @isObject = true
    @pinkmanType = 'object'
    @collections = new PinkmanCollection
    if $p.isArray(@constructor.instances)
      @constructor.instances.push(this)
    else
      @constructor.instances = [this]
    Pinkman.objects.push(this)
    
  @alias: (newFunc, existingFunc) ->
    @prototype[newFunc] = @prototype[existingFunc]
    
  @sync: (obj, callback, each) ->
    if $p.isArray(@instances) and $p.isObject(obj) and obj.id?
      length = @instances.length
      i = 0
      for instance in @instances
        i = i + 1
        if instance.id? and instance.id == obj.id
          if obj.isPink then instance.assign(obj.json()) else instance.assign(obj)
          each(instance) if $p.isFunction(each) and obj.pinkey != instance.pinkey
        callback() if (length == i) and $p.isFunction(callback)
    else
      true
    
    
  # Desc: assign attributes from a pure javascript object
  # Usage: a.assign( {attribute: value} )
  assign: (obj) ->
    if typeof obj == 'object'
      for k,v of obj
        if typeof v == 'object' and v? and this[k]? and this[k].isPink and not v.isPink
          this[k].assign(v)
        else
          this.set(k,v)
      return true
    else
      return false

  # Desc: returns a javascript object version of this
  # Usage: a.attributes() #-> {key: value, key: value, ...}
  attributes: (initialObj)->
    a = new Object
    for k,v of this
      if PinkmanObject.privateAttributes.indexOf(k) == -1 and typeof v != 'function'
        if (v? and typeof v == 'object' and v.isPink)
          # initial obj with unless condition stops circular reference
          a[k] = v.attributes(this) unless (initialObj? and initialObj.pinkey == v.pinkey)
        else
          a[k] = v
    return a

  # Desc: json version of this
  # desc: used in api comunications
  json: ->
    (@pack(toBePacked) for toBePacked in @_pack_list) if $p.isArray(@_pack_list)
    a = new Object
    for k,v of this
      a[k] = v if PinkmanObject.privateAttributes.indexOf(k) == -1 and not $p.isFunction(v) and (not $p.isObject(v) or $p.isArray(v)) and k[0] != '_'
      # 
      # else
      #   console.log "recusou: #{k}"
    return a
    
  # Desc: prepare for rails accept nested attributes
  pack: (attr) ->
    # console.log 'tÃ¡ pegando'
    @_pack_list = [] unless @_pack_list?
    @_pack_list.push(attr) if @_pack_list.indexOf(attr) == -1
    if $p.isPink(this[attr])
      pack = this[attr]
      attrs = pack.json()
      if pack.isCollection
        # console.log 'entrou pra collection'
        @set("#{attr}_attributes", pack.json())
      else
        @set("#{attr}_attributes[#{k}]", v) for k,v of attrs
    attrs

  # Desc: returns a array of attributes keys
  # Usage:
  # a.set('a','b'); a.set('x',value)
  # a.attributesKeys() #-> ['a','x']
  attributesKeys: ->
    Object.keys(@attributes())

  # Desc: Alias for attributesKeys
  keys: ->
    @attributesKeys()

  extract: (args...) ->
    a = new Object
    (a[k] = this[k]) for k in args
    return(a)
      

  toString: ->
    array = []
    array.push("(#{@className()})")
    for a in @attributesKeys()
      array.push "#{a}: #{this[a]};"
    array.join(" ")

  # --- Collection related functions --- #

  # Desc: return the next obj (after this) in a collection
  # Try to guess the collection if not provided
  next: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.next(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.next(this) if c?
    else if not collection? or collection==''
      @collections.first().next(this) if @collections.any()

  # Desc: return the previous obj (before this) in a collection
  # Try to guess the collection if not provided
  prev: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.prev(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.prev(this) if c?
    else if not collection? or collection==''
      @collections.first().prev(this) if @collections.any()

  # Desc: remove this object from all collections
  clearCollections: ->
    @collections.each (c) =>
      # console.log this
      c.removeId(@id) if @id?

  # alias for clearCollections
  removeFromCollections: ->
    @clearCollections()

  # alias for clearCollections
  removeFromAllCollections: ->
    @clearCollections()

  # alias for clearCollections
  removeAllCollections: ->
    @clearCollections()

  # --- Error related --- #

  # Desc: return first error message
  firstError: ->
    if @errors?
      attr = Object.keys(@errors)[0]
      "#{attr} #{@errors[attr][0]}"

  # --- Ajax --- #

  @find: (id, callback='') ->
    obj = new this
    params = new Object
    params.scope = Pinkman.scope(obj)

    Pinkman.ajax.get
      url: Pinkman.json2url(obj.api() + id,params)
      complete: (response) ->
        obj.assign(response)
        if obj.error? or obj.errors?
          throw new Error(obj.firstError())
          return false
        else
          callback(obj) if callback? and typeof callback == 'function'
    return(obj)

  create: (callback='') ->
    unless @id?
      Pinkman.ajax.post
        url: @api()
        data: @_data()
        complete: (response) =>
          @default_response_handling(response,callback)
      return(this)

  update: (callback='') ->
    if @id?
      Pinkman.ajax.patch
        url: @api(@id)
        data: @_data()
        complete: (response) =>
          @default_response_handling(response,callback)
      return(this)
  
  default_response_handling: (response,callback) ->
    @assign(response)
    @unset 'errors' unless response.errors?
    callback(this) if callback? and typeof callback=='function'
  
  reload: (callback) ->
    params = new Object
    params.scope = Pinkman.scope(this)
    Pinkman.ajax.get
      url: Pinkman.json2url(@api(@id),params)
      complete: (response) =>
        @assign(response)
        if @error? or @errors?
          throw new Error(@firstError())
          return false
        else
          callback(this) if callback? and typeof callback == 'function'
    return(this)

  updateAttributes: (obj) ->
    if this.assign(obj)
      this.save (obj) ->
        return(obj)
    else
      return false

  save: (callback='') ->
    @handleBeforeSave()
    callback = @handleAfterSaveCallback(callback)
    if @id? and @id!='' then @update(callback) else @create(callback)  
    
  handleBeforeSave: ->
    if $p.isArray(@beforeSave)
      for f in @beforeSave
        f(this) if $p.isFunction(f)
    else if $p.isFunction(@beforeSave)
      @beforeSave(this)
            
  handleAfterSaveCallback: (callback) ->
    if $p.isArray(@afterSave)
      (obj) =>
        i = 0
        for f in @afterSave
          f(obj) if $p.isFunction(f)
          i = i + 1
          callback(obj) if i == @afterSave.length and $p.isFunction(callback)
    else if $p.isFunction(@afterSave)
      (obj) =>
        @afterSave(obj)
        callback(obj) if $p.isFunction()
    else
      callback

  # delete and remove from collections
  destroy: (callback='') ->
    if @id?
      @removeFromAllCollections()
      Pinkman.ajax.delete
        url: @api(@id)
        data: @_data()
        complete: (response) =>
          @assign(response)
          delete @errors unless response.errors?
          @id = null unless @errors?
          callback(this) if callback? and typeof callback=='function'
      return(this)
    else
      return(false)

  # delete and dont touch collections
  delete: (callback='') ->
    if @id?
      Pinkman.ajax.delete
        url: @api(@id)
        data: @_data()
        complete: (response) =>
          @assign(response)
          delete @errors unless response.errors?
          @id = null unless @errors?
          callback(this) if callback? and typeof callback=='function'
      return(this)
    else
      return(false)

window.Pinkman.object = window.PinkmanObject
