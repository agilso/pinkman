class window.PinkmanObject extends window.PinkmanCommon

  @pinkmanType: 'object'
  @privateAttributes: ['isPink','isObject','pinkey','config','pinkmanType','collections']

  constructor: ->
    @isPink = true
    @isObject = true
    @pinkmanType = 'object'

    @collections = new PinkmanCollection
    @pinkey = Pinkman.all.length + 1

    Pinkman.objects.push(this)
    Pinkman.all.push(this)

  # Desc: assign attributes from a pure javascript object
  # Usage: a.assign( {attribute: value} )
  assign: (obj) ->
    if typeof obj == 'object'
      for k,v of obj
        if typeof v == 'object' and this[k]? and this[k].isPink? and not v.isPink
          this[k].assign(v)
        else
          this.set(k,v) 
      return true
    else
      return false

  # Desc: returns a javascript object version of this
  # Usage: a.attributes() #-> {key: value, key: value, ...}
  attributes: () ->
    a = new Object
    for k,v of this
      if PinkmanObject.privateAttributes.indexOf(k) == -1 and typeof v != 'function'
        if v.isPink
          a[k] = v.attributes()
        else
          a[k] = v
    return a
  
  # Desc: returns a array of attributes keys
  # Usage:
  # a.set('a','b'); a.set('x',value)
  # a.attributesKeys() #-> ['a','x']
  attributesKeys: ->
    Object.keys(@attributes())

  # Desc: Alias for attributesKeys
  keys: () ->
    @attributesKeys()

  toString: () ->
    array = []
    array.push("(#{@className()})")
    for a in @attributesKeys()
      array.push "#{a}: #{this[a]};"
    array.join(" ")

  # --- Collection related functions --- # 

  # Desc: return the next obj (after this) in a collection
  # Try to guess the collection if not provided
  next: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.next(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.next(this) if c?
    else if not collection? or collection==''
      @collections.first().next(this) if @collections.any()

  # Desc: return the previous obj (before this) in a collection
  # Try to guess the collection if not provided
  prev: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.prev(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.prev(this) if c?
    else if not collection? or collection==''
      @collections.first().prev(this) if @collections.any()

  # Desc: remove this object from all collections
  clearCollections: ->
    c.remove(this) for c in @collections.collection

  # --- Error related --- #

  # Desc: return first error message
  firstError: ->
    if @errors?
      attr = Object.keys(@errors)[0]
      "#{attr} #{@errors[attr][0]}"


  


  # clearCollections: ->
  #   if @collectionsIds? and @collectionsIds.length >= 1
  #     for col in @collections()
  #       col.remove this
  #     @collectionsIds = []
  

  # addCollection: (id) ->
  #   if id?
  #     @collectionsIds = [] unless @collectionsIds?
  #     @collectionsIds.push(id)
  #     return true
  #   else
  #     return false

  # removeCollection: (id) ->
  #   if id? and @collectionsIds?
  #     @collectionsIds.splice @collectionsIds.indexOf(id), 1
  #     return true
  #   else
  #     return false    

  # collections: () ->
  #   if @collectionsIds? and @collectionsIds.length >= 1
  #     c = []
  #     for id in @collectionsIds
  #       c.push(PinkmanGlue.collections[id])
  #     return c
  #   else
  #     return false


  

  # prev: (collectionID=0) =>
  #   @collections()[collectionID].prev(this) if @collections()[collectionID]?
  #   # @collections()[collectionID].prev(this) if @collections()?

  # next: (collectionID=0) =>
  #   @collections()[collectionID].next(this) if @collections()[collectionID]?

  # pinkfy: (attribute,pinkmanClass,callback = "") ->
  #   if pinkmanClass.pinkmanType == "collection" and (this[attribute] instanceof Array)
  #     collection = new pinkmanClass
  #     for obj in this[attribute]
  #       pinkmanObject = collection.config.memberClass()
  #       pinkmanObject.assign(obj)
  #       collection.push(pinkmanObject)
  #     this[attribute] = collection
  #     callback(collection) if typeof callback == "function"
  #     return this
  #   else if pinkmanClass.pinkmanType == 'object' and (typeof this[attribute] == 'object')
  #     pinkmanObject = new pinkmanClass
  #     if (this[attribute] instanceof Array) and (this[attribute].length)
  #       pinkmanObject.assign(this[attribute][0]) 
  #     else
  #       pinkmanObject.assign this[attribute]
      
  #     this[attribute] = pinkmanObject
  #     callback(pinkmanObject) if typeof callback == "function"
  #     return this
  #   else
  #     return false



  # # Ajax - Area

  # @find: (id, callback = "") ->
  #   obj = new this
  #   ajax = jQuery.ajax "/" + obj.apiUrl() + "/" + id.toString(),
  #     type: "GET"
  #     dataType: 'json'
  #   ajax.done (response) =>
  #     if response.errors?
  #       obj.set('errors',response.errors)
  #       return false
  #     else
  #       # window.r = response
  #       # console.log response
  #       # console.log 'resposta acima - obj abaixo'
  #       # window.o = obj
  #       # console.log obj
  #       obj.assign(response)
  #     if typeof callback == "function"
  #       callback(obj)
  #   return obj

  # @fetchFromUrl: (url,callback = "") ->
  #   obj = new this
  #   ajax = jQuery.ajax "/" + url,
  #     type: "GET"
  #     dataType: 'json'
  #   ajax.done (response) =>
  #     if response.errors?
  #       obj.set('errors',response.errors)
  #       return false
  #     else
  #       obj.assign response
  #     if typeof callback == "function"
  #       callback(obj)
  #   return obj

  # @fetchFrom: (actionUrl, id, callback = "") ->
  #   if actionUrl? and id?
  #     obj = new this
  #     ajax = jQuery.ajax "/" + obj.apiUrl() + "/" + actionUrl.toString() + "/" + id.toString(),
  #       type: "GET"
  #       dataType: 'json'
  #     ajax.done (response) =>
  #       if response.errors?
  #         obj.set('errors',response.errors)
  #         return false
  #       else
  #         obj.assign response
  #       if typeof callback == "function"
  #         callback(obj)
  #     return obj


  # create: (callback = "") ->
  #   unless @id?
  #     ajax = jQuery.ajax "/" + @apiUrl(),
  #       beforeSend: (xhr) -> 
  #         xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
  #       dataType: 'json'
  #       type: "POST"
  #       data: { "pink_obj": @attributes() }

  #     ajax.done (response) =>
  #       if response.errors?
  #         @errors = response.errors
  #       else
  #         delete @errors
  #         @assign(response)
  #       if typeof callback == "function"
  #         callback(this)
  #   return this


  # update: (callback= "") ->
  #   if @id?
  #     ajax = jQuery.ajax("/" + @apiUrl() + "/" + @id,
  #       beforeSend: (xhr) -> 
  #         xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
  #       dataType: 'json'
  #       type: "PATCH"
  #       data: { "pink_obj": @attributes() }
  #     )
  #     ajax.done (response) =>
  #       if response.errors?
  #         @errors = response.errors
  #       else
  #         delete @errors
  #         @assign(response)
  #       if typeof callback == "function"
  #         callback(this)
  #   return this

  # reload: (callback) ->
  #   if @id?
  #     ajax = jQuery.ajax "/" + @apiUrl() + "/" + @id,
  #       type: "GET"
  #       dataType: 'json'
  #     ajax.done (response) =>
  #       if response.errors?
  #         @errors = response.errors
  #         return false
  #       else
  #         @assign(response)
  #         if typeof callback == 'function'
  #           callback(this)
  #     return this

  # updateAttributes: (obj) ->
  #   if this.assign(obj)
  #     this.save()
  #     return this
  #   else
  #     return false

  # save: (callback = "") ->
  #   # console.log 'entrou no save'
  #   # console.log this.pinkey
  #   if @id?
  #     if typeof callback == "function"
  #       this.update (obj) ->
  #         callback(obj)
  #     else
  #       this.update()
  #   else
  #     if typeof callback == "function"
  #       this.create (obj) ->
  #         callback(obj)
  #     else
  #       this.create()

  # destroy: (callback="") ->
  #   if @id?
  #     ajax = jQuery.ajax("/" + @apiUrl() + "/" + @id,
  #       beforeSend: (xhr) -> 
  #         xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
  #       dataType: 'json'
  #       type: "DELETE"
  #     )
  #     ajax.done (response) =>
  #       if response.errors?
  #         @errors = response.errors
  #       else
  #         @assign(response)
  #         @id = null
  #         @clearCollections()
  #       if typeof callback == "function"
  #         callback(this)
  #     return this
  #   else
  #     return false