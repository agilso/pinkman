class window.PinkmanObject extends window.PinkmanCommon

  @pinkmanType: 'object'

  constructor: (attributesObject) ->
    
    @isPink = true
    @isObject = true
    @pinkmanType = 'object'

    @collections = new PinkmanCollection
    @pinkey = Pinkman.all.length

    Pinkman.objects.push(this)
    Pinkman.all.push(this)
    
    @initialize(attributesObject)

  initialize: (attributesObject) ->
    if typeof attributesObject == 'object'
      for key, value of attributesObject
        @set(key,value) if PinkmanObject.privateAttributes.indexOf(key) is -1

  # Desc: assign attributes from a pure javascript object
  # Usage: a.assign( {attribute: value} )
  assign: (obj) ->
    if typeof obj == 'object'
      for k,v of obj
        if typeof v == 'object' and this[k]? and this[k].isPink? and not v.isPink
          this[k].assign(v)
        else
          this.set(k,v) 
      return true
    else
      return false

  # Desc: returns a javascript object version of this
  # Usage: a.attributes() #-> {key: value, key: value, ...}
  attributes: () ->
    a = new Object
    for k,v of this
      if PinkmanObject.privateAttributes.indexOf(k) == -1 and typeof v != 'function'
        if v.isPink
          a[k] = v.attributes()
        else
          a[k] = v
    return a
  
  # Desc: returns a array of attributes keys
  # Usage:
  # a.set('a','b'); a.set('x',value)
  # a.attributesKeys() #-> ['a','x']
  attributesKeys: ->
    Object.keys(@attributes())

  # Desc: Alias for attributesKeys
  keys: () ->
    @attributesKeys()

  toString: () ->
    array = []
    array.push("(#{@className()})")
    for a in @attributesKeys()
      array.push "#{a}: #{this[a]};"
    array.join(" ")

  # --- Collection related functions --- # 

  # Desc: return the next obj (after this) in a collection
  # Try to guess the collection if not provided
  next: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.next(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.next(this) if c?
    else if not collection? or collection==''
      @collections.first().next(this) if @collections.any()

  # Desc: return the previous obj (before this) in a collection
  # Try to guess the collection if not provided
  prev: (collection='') ->
    if collection.isPink and collection.pinkmanType == 'collection'
      collection.prev(this)
    else if Pinkman.isNumber(collection)
      c = @collections.get(collection)
      c.prev(this) if c?
    else if not collection? or collection==''
      @collections.first().prev(this) if @collections.any()

  # Desc: remove this object from all collections
  clearCollections: ->
    c.remove(this) for c in @collections.collection

  # --- Error related --- #

  # Desc: return first error message
  firstError: ->
    if @errors?
      attr = Object.keys(@errors)[0]
      "#{attr} #{@errors[attr][0]}"

window.Pinkman.object = window.PinkmanObject