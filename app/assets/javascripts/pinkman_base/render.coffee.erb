Pinkman.templates = new Pinkman.collection

Pinkman.template_engine = '<%= Pinkman.configuration.js_template_engine %>'

Pinkman.template_engines =

  handlebars: (template,html) ->
    if Handlebars?
      template.handlebars = Handlebars.compile(html)
      template.render = (context) ->
        @handlebars(context)
      template
    else
      throw 'Pinkman: handlebars not found.'


  hogan: (template,html) ->
    if Hogan?
      template.hogan = Hogan.compile(html)
      template.render = (context) ->
        @hogan.render(context)
      template
    else
      throw 'Pinkman: hogan not found.'


  markup: (template,html) ->
    if Mark?
      template.render = (context) -> Mark.up(html,context)
      template
    else
      throw 'Pinkman: markup not found.'

  template: (options) ->
    # console.log options.template
    # console.log options.engine
    if Pinkman.templates.any(template: options.template, engine: options.engine)
      template = Pinkman.templates.get(template: options.template, engine: options.engine)
    else
      template = new Pinkman.object(template: options.template, engine: options.engine)
      @compile(options.engine, template, @templateModifier($('#' + options.template).html()))
      Pinkman.templates.push(template)
    return(template)
  
  # templateModifier
  # apply all pinkman modifiers to templates
  templateModifier: (templateBody) ->
    # console.log templateBody
    # console.log @partialAdapter(templateBody)
    # console.log @templateAdapter(templateBody)
    
    # content = templateBody
    # content = @partialAdapter(templateBody)
    # content = @templateAdapter(templateBody)
    Pinkman.unescape(@templateAdapter(@partialAdapter(templateBody)))
    
  
  # attrAdapterHelper: helper for templateAdapter
  # Helps formating the pink tag.
  # The pink tag is a custom html tag. Pinkman uses it for binding an object and for updating the rendered html automatically everytime that attribute is changed.
  # Used in the replace function below. Take a look.
  attrAdapterHelper: (match,$1,$2,$3) ->
    array = $2.split('.')
    attr = array.pop()
    array.push('pinkey')
    pinkey = array.join('.')
    "#{$1}<pink data-pinkey=\"{{ #{pinkey} }}\" data-attribute=\"#{attr}\">{{ #{$2} }}</pink>#{$3}"
        
  # changes templates html to insert binders so pinkman can make realtime updates
  templateAdapter: (templateBody) ->
    if templateBody? and templateBody != ''
      syncRegex = /([^'"]){{(?!\.)(?:\s)*([\w\d.]+)(?:\s)*}}([^'"])/gm
      content = templateBody.replace(syncRegex,@attrAdapterHelper)
      escapeSyncingRegex = /{{\./gm
      content.replace(escapeSyncingRegex,'{{')
    else
      ''
  
  # modifies templates inserting partials before sending them to rendering the engines
  partialAdapter: (templateBody) ->
    if templateBody? and templateBody != ''
      partialRegex = /{{(?:\s)*partial\((?:\s)*((?:\w|-)*)(?:\s)*\)(?:\s)*}}/gm
      templateBody.replace(partialRegex,@partialInception)
    else
      ''
  
  partialInception: (match,id) ->
    # partialRegex = /{{(?:\s)*partial\((?:\s)*((?:\w|-)*)(?:\s)*\)(?:\s)*}}/gm
    # id = id.replace(partialRegex,'$1')
    # console.log id
    p = $("script##{id}.p[type='text/p-partial']")
    if p.length
      p.html()
    else
      match

  context: (options) ->
    options.object = options.context if options.context?
    options.object = new Object unless options.object? and typeof options.object == 'object'
    return(options.object)

  compile: (engine, template, html) ->
    # console.log engine
    e = Pinkman.template_engines[engine]
    e(template,html)
    template

  renderOntarget: (options,content) ->
    if options.target?
      $('#' + options.target).html(content)
      $('#' + options.target).attr('data-pinkey',options.object.pinkey) if options.object? and typeof options.object == 'object' and options.object.isPink

      # checks and sync select, checkboxes and radiobuttons options with the pinkman object
      # select
      $("##{options.target} select").each (i,el) ->
        obj = Pinkman.get($(el).data('pinkey'))
        $(el).find("option[value='#{obj[$(el).attr('name')]}']").attr('selected','selected')
      
      # checkboxes and radios
      $("##{options.target} input[type='checkbox'], ##{options.target} input[type='radio']").each (i,el) ->
        obj = Pinkman.get($(el).data('pinkey'))
        $el = $(el)
        attr = $el.attr('name')
        value = $el.attr('value')
        # console.log attr
        # console.log value.toString()
        # console.log obj[attr].toString()
        
        if attr? and value? and obj? and obj[attr]? and obj[attr] and obj[attr].toString() == value.toString()
          $el.attr('checked', yes) 
        else
          $el.attr('checked', no)
      
      

  render: (options) ->
      
    # 1 check if template exists
    if options? and options.template? and $('#' + options.template).length

      # 2 check if compiled template exists. Create one otherwise.
      template = @template(options)

      # 3 render template within the context
      content = template.render(@context(options))

      # 4 insert html on target
      @renderOntarget(options,content)

      # 5 restore scrolling positions (when applicable)
      if options.freeze and Pinkman.scrolling?
        if typeof options.freeze == 'string'
          Pinkman.restoreElementScrollPosition(options.freeze)
        else if Pinkman.isArray(options.freeze)
          Pinkman.restoreElementScrollPosition(o) for o in options.freeze

      # 6 callback function
      options.callback(options.object,content) if options.callback? and typeof options.callback == 'function'
      return(content)
    else
      throw "Pinkman: #{options.template} not found."

# Pinkman sync:

# what it does: finds every ocorrence of a given attribute 
# of an object in the html rendered and updates its value.

# input: obj, attribute, value(opcional)
# output: updates html
Pinkman.__syncing = new Object

Pinkman.sync = (obj,attribute,value) ->
  if typeof obj == 'object' and obj.pinkey? and obj[attribute]? and (value? or Pinkman.isPrintable(obj[attribute]))
    # clearTimeout(Pinkman.__syncing[attribute]) if Pinkman.__syncing[attribute]?
    # Pinkman.__syncing[attribute] = sleep 0.5, ->
    value = obj[attribute] unless value? and value != ''
    $("pink[data-pinkey='#{obj.pinkey}'][data-attribute='#{attribute}']").html(value)


Pinkman.render = (options) ->
  if $p.isObject(options) or $p.isString(options)
    options = {template: (options + '-template'), target: options} if $p.isString(options)
    options.template = options.template + '-template' unless /-template$/.test(options.template)
    options.reRender = true unless options.reRender? and options.reRender == false
    options.collectionReRender = true unless options.collectionReRender? and options.collectionReRender == false
    options.engine = Pinkman.template_engine unless options.engine? and options.engine != ''
    Pinkman.template_engines.render(options) 
    options.object._queue(options) if options.reRender and options.object? and options.object.isPink
  else
    throw "Pinkman.render: options argument is neither an object nor a string."

Pinkman.scrolling = new PinkmanCollection unless Pinkman.scrolling?

Pinkman.saveElementScrollPosition = (id) ->
  a = Pinkman.scrolling.find(id)
  a = new Pinkman.object unless a?
  a.set('id',id)
  position = if document.getElementById(id) then document.getElementById(id).scrollTop else 0
  a.set('position', position)
  Pinkman.scrolling.push(a)

Pinkman.restoreElementScrollPosition = (id) ->
  if Pinkman.scrolling.include(id: id)
    document.getElementById(id).scrollTop = Pinkman.scrolling.find(id).position

Pinkman.reRender = (object) ->
  if object.renderQueue?
    collectionReRender = false
    for options in object.renderQueue.collection
      if options.freeze?
        if typeof options.freeze == 'string'
          Pinkman.saveElementScrollPosition(options.freeze)
        else if Pinkman.isArray(options.freeze)
          Pinkman.saveElementScrollPosition(o) for o in options.freeze
      
      Pinkman.template_engines.render(options)


      collectionReRender = true if options.collectionReRender
    collection.reRender() for collection in object.collections.collection if collectionReRender and object.collections?
    object.renderQueue.any()
  else
    true
    