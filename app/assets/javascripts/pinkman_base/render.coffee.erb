Pinkman.templates = new Pinkman.collection

Pinkman.template_engine = '<%= Pinkman.configuration.js_template_engine %>'

Pinkman.template_engines =

  handlebars: (template,html) ->
    if Handlebars?
      template.handlebars = Handlebars.compile(html)
      template.render = (context) ->
        @handlebars(context)
      template
    else


  hogan: (template,html) ->
    if Hogan?
      template.hogan = Hogan.compile(html)
      template.render = (context) ->
        @hogan.render(context)
      template
    else


  markup: (template,html) ->
    if Mark?
      template.render = (context) -> Mark.up(html,context)
      template
    else

  template: (options) ->
    if Pinkman.templates.include(template: options.template, engine: options.engine)
      template = Pinkman.templates.get(template: options.template, engine: options.engine)
    else
      template = new Pinkman.object(template: options.template, engine: options.engine)
      @compile(options.engine, template, $('#' + options.template).html())
      Pinkman.templates.push(template)
    return(template)

  context: (options) ->
    options.object = options.context if options.context?
    options.object = new Object unless options.object? and typeof options.object == 'object'
    return(options.object)

  compile: (engine, template, html) ->
    e = Pinkman.template_engines[engine]
    e(template,html)
    template

  renderOntarget: (options,content) ->
    if options.target?
      $('#' + options.target).html(content)
      $('#' + options.target).attr('data-pinkey',options.object.pinkey) if options.object? and typeof options.object == 'object' and options.object.isPink

      # checks and sync select options with the pinkman object
      $("##{options.target} select").each (i,el) ->
        obj = Pinkman.get($(el).data('pinkey'))
        $(el).find("option[value='#{obj[$(el).attr('name')]}']").attr('selected','selected')

  render: (options) ->
    # 1 check if template exists
    if options? and options.template? and $('#' + options.template).length

      # 2 check if compiled template exists. Create one otherwise.
      template = @template(options)

      # 3 render template within the context
      content = template.render(@context(options))

      # 4 insert html on target
      @renderOntarget(options,content)

      # 5 callback function
      options.callback(options.object,content) if options.callback? and typeof options.callback == 'function'
      return(content)

Pinkman.render = (options) ->
  options.reRender = true unless options.reRender? and options.reRender == false
  options.collectionReRender = true unless options.collectionReRender? and options.collectionReRender == false
  options.engine = Pinkman.template_engine unless options.engine? and options.engine != ''
  Pinkman.template_engines.render(options) 
  options.object.queue(options) if options.reRender and options.object? and options.object.isPink

Pinkman.reRender = (object) ->
  if object.renderQueue?
    collectionReRender = false
    for options in object.renderQueue.collection
      Pinkman.template_engines.render(options)
      collectionReRender = true if options.collectionReRender
    collection.reRender() for collection in object.collections.collection if collectionReRender and object.collections?
    object.renderQueue.any()
  else
    true
    