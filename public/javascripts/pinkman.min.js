(function() {
  window.Pinkman = (function() {
    function Pinkman() {}

    Pinkman.collections = [];

    Pinkman.objects = [];

    Pinkman.all = [];

    Pinkman.isNumber = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    Pinkman.isArray = function(array) {
      return array instanceof Array;
    };

    return Pinkman;

  })();

}).call(this);
(function() {
  window.PinkmanCommon = (function() {
    function PinkmanCommon() {}

    PinkmanCommon.prototype.apiUrl = function() {
      return this.config.apiUrl;
    };

    PinkmanCommon.prototype.className = function() {
      return this.constructor.name;
    };

    PinkmanCommon.prototype.set = function(attr, value, callback) {
      if (callback == null) {
        callback = "";
      }
      if ((attr != null) && (value != null)) {
        this[attr] = value;
        if (typeof callback === "function") {
          callback(this);
        }
        if (this.watch) {
          this.reRender();
        }
        return true;
      }
    };

    PinkmanCommon.prototype.render = function(options) {
      if (typeof options === 'object') {
        options.object = this;
        return Pinkman.render(options);
      }
    };

    PinkmanCommon.prototype.reRender = function(options) {
      if (typeof options === 'object') {
        options.object = this;
        return Pinkman.reRender(options);
      }
    };

    return PinkmanCommon;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PinkmanObject = (function(superClass) {
    extend(PinkmanObject, superClass);

    PinkmanObject.pinkmanType = 'object';

    PinkmanObject.privateAttributes = ['isPink', 'isObject', 'pinkey', 'config', 'pinkmanType', 'collections'];

    function PinkmanObject(attributesObject) {
      this.isPink = true;
      this.isObject = true;
      this.pinkmanType = 'object';
      this.collections = new PinkmanCollection;
      this.pinkey = Pinkman.all.length + 1;
      Pinkman.objects.push(this);
      Pinkman.all.push(this);
      this.initialize(attributesObject);
    }

    PinkmanObject.prototype.initialize = function(attributesObject) {
      var key, results, value;
      if (typeof attributesObject === 'object') {
        results = [];
        for (key in attributesObject) {
          value = attributesObject[key];
          if (PinkmanObject.privateAttributes.indexOf(key) === -1) {
            results.push(this.set(key, value));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    PinkmanObject.prototype.assign = function(obj) {
      var k, v;
      if (typeof obj === 'object') {
        for (k in obj) {
          v = obj[k];
          if (typeof v === 'object' && (this[k] != null) && (this[k].isPink != null) && !v.isPink) {
            this[k].assign(v);
          } else {
            this.set(k, v);
          }
        }
        return true;
      } else {
        return false;
      }
    };

    PinkmanObject.prototype.attributes = function() {
      var a, k, ref, v;
      a = new Object;
      ref = this;
      for (k in ref) {
        v = ref[k];
        if (PinkmanObject.privateAttributes.indexOf(k) === -1 && typeof v !== 'function') {
          if (v.isPink) {
            a[k] = v.attributes();
          } else {
            a[k] = v;
          }
        }
      }
      return a;
    };

    PinkmanObject.prototype.attributesKeys = function() {
      return Object.keys(this.attributes());
    };

    PinkmanObject.prototype.keys = function() {
      return this.attributesKeys();
    };

    PinkmanObject.prototype.toString = function() {
      var a, array, i, len, ref;
      array = [];
      array.push("(" + (this.className()) + ")");
      ref = this.attributesKeys();
      for (i = 0, len = ref.length; i < len; i++) {
        a = ref[i];
        array.push(a + ": " + this[a] + ";");
      }
      return array.join(" ");
    };

    PinkmanObject.prototype.next = function(collection) {
      var c;
      if (collection == null) {
        collection = '';
      }
      if (collection.isPink && collection.pinkmanType === 'collection') {
        return collection.next(this);
      } else if (Pinkman.isNumber(collection)) {
        c = this.collections.get(collection);
        if (c != null) {
          return c.next(this);
        }
      } else if ((collection == null) || collection === '') {
        if (this.collections.any()) {
          return this.collections.first().next(this);
        }
      }
    };

    PinkmanObject.prototype.prev = function(collection) {
      var c;
      if (collection == null) {
        collection = '';
      }
      if (collection.isPink && collection.pinkmanType === 'collection') {
        return collection.prev(this);
      } else if (Pinkman.isNumber(collection)) {
        c = this.collections.get(collection);
        if (c != null) {
          return c.prev(this);
        }
      } else if ((collection == null) || collection === '') {
        if (this.collections.any()) {
          return this.collections.first().prev(this);
        }
      }
    };

    PinkmanObject.prototype.clearCollections = function() {
      var c, i, len, ref, results;
      ref = this.collections.collection;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results.push(c.remove(this));
      }
      return results;
    };

    PinkmanObject.prototype.firstError = function() {
      var attr;
      if (this.errors != null) {
        attr = Object.keys(this.errors)[0];
        return attr + " " + this.errors[attr][0];
      }
    };

    return PinkmanObject;

  })(window.PinkmanCommon);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  window.PinkmanCollection = (function(superClass) {
    extend(PinkmanCollection, superClass);

    PinkmanCollection.pinkmanType = 'collection';

    PinkmanCollection.privateAttributes = ['isPink', 'isCollection', 'pinkey', 'config', 'pinkmanType'];

    PinkmanCollection.prototype.config = {
      memberClass: PinkmanObject
    };

    function PinkmanCollection() {
      this.isPink = true;
      this.isCollection = true;
      this.pinkmanType = 'collection';
      this.collection = [];
      this.pinkey = Pinkman.all.length + 1;
      Pinkman.collections.push(this);
      Pinkman.all.push(this);
    }

    PinkmanCollection.prototype.attributes = function() {
      return this.collection;
    };

    PinkmanCollection.prototype.count = function(criteria) {
      var count, j, len, object, ref;
      if (criteria == null) {
        criteria = '';
      }
      if ((criteria != null) && typeof criteria === 'function') {
        count = 0;
        ref = this.collection;
        for (j = 0, len = ref.length; j < len; j++) {
          object = ref[j];
          if (criteria(object)) {
            count++;
          }
        }
        return count;
      } else {
        return this.collection.length;
      }
    };

    PinkmanCollection.prototype.size = function(criteria) {
      if (criteria == null) {
        criteria = '';
      }
      return this.count(criteria);
    };

    PinkmanCollection.prototype.length = function(criteria) {
      if (criteria == null) {
        criteria = '';
      }
      return this.count(criteria);
    };

    PinkmanCollection.prototype.each = function(transformation) {
      var j, len, o, ref;
      if (transformation == null) {
        transformation = '';
      }
      if ((transformation != null) && typeof transformation === 'function') {
        ref = this.collection;
        for (j = 0, len = ref.length; j < len; j++) {
          o = ref[j];
          transformation(o);
        }
      }
      return this;
    };

    PinkmanCollection.prototype.select = function(criteria, callback) {
      var selection;
      if (callback == null) {
        callback = '';
      }
      selection = new this.constructor;
      this.each(function(object) {
        if (criteria(object)) {
          return selection.push(object);
        }
      });
      if (typeof callback === 'function') {
        callback(selection);
      }
      return selection;
    };

    PinkmanCollection.prototype.push = function(arg) {
      if (Pinkman.isArray(arg)) {
        return this.fetchFromArray(arg);
      } else {
        return this.pushIndividually(arg);
      }
    };

    PinkmanCollection.prototype.pushIndividually = function(object) {
      if (typeof object === 'object') {
        object = this.beforeInsertionPrep(object);
        if (!this.include(object)) {
          this.collection.push(object);
          if (object.isObject && (object.collections != null) && !object.collections.include(this)) {
            return object.collections.push(this);
          }
        }
      }
    };

    PinkmanCollection.prototype.unshift = function(object) {
      var item, j, len, results;
      if ((object != null) && Pinkman.isArray(object)) {
        results = [];
        for (j = 0, len = object.length; j < len; j++) {
          item = object[j];
          results.push(this.unshiftIndividually(item));
        }
        return results;
      } else if (typeof object === 'object' && object.isPink && !this.include(object)) {
        this.collection.unshift(object);
        if (object.isObject && (object.collections != null) && !object.collections.include(this)) {
          return object.collections.unshift(this);
        }
      }
    };

    PinkmanCollection.prototype.unshiftIndividually = function(object) {
      if (typeof object === 'object') {
        object = this.beforeInsertionPrep(object);
        if (!this.include(object)) {
          this.collection.unshift(object);
          if (object.isObject && (object.collections != null) && !object.collections.include(this)) {
            return object.collections.push(this);
          }
        }
      }
    };

    PinkmanCollection.prototype.beforeInsertionPrep = function(object) {
      var pinkObject;
      if (!object.isPink) {
        pinkObject = this["new"]();
        pinkObject.assign(object);
        object = pinkObject;
      }
      return object;
    };

    PinkmanCollection.prototype.pop = function() {
      return this.remove(this.last());
    };

    PinkmanCollection.prototype.shift = function() {
      return this.remove(this.first());
    };

    PinkmanCollection.prototype.remove = function(object) {
      var i;
      if (object != null) {
        i = this.collection.indexOf(object);
        this.collection.splice(i, 1);
        return object;
      }
    };

    PinkmanCollection.prototype.removeBy = function(attribute, value) {
      if ((attribute != null) && (value != null)) {
        return this.remove(this.getBy(attribute, value));
      }
    };

    PinkmanCollection.prototype.removeAll = function() {
      if (this.any()) {
        this.remove(this.first());
        return this.removeAll();
      } else {
        return true;
      }
    };

    PinkmanCollection.prototype.include = function(args) {
      var item, j, len, value;
      if ((args != null) && Pinkman.isArray(args)) {
        value = true;
        for (j = 0, len = args.length; j < len; j++) {
          item = args[j];
          if (!this.include(item)) {
            value = false;
          }
        }
        return value;
      } else if ((args != null) && typeof args === 'object') {
        if (args.id != null) {
          return this.any(function(o) {
            return args.id === o.id;
          });
        } else {
          return this.collection.indexOf(args) !== -1;
        }
      } else {
        return false;
      }
    };

    PinkmanCollection.prototype.first = function(n) {
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.collection[0];
      } else {
        return this.collection.slice(0, +(n - 1) + 1 || 9e9);
      }
    };

    PinkmanCollection.prototype.last = function(n) {
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.collection[this.collection.length - 1];
      } else {
        return this.collection.slice(this.collection.length - n - 1);
      }
    };

    PinkmanCollection.prototype.any = function(criteria) {
      if (criteria == null) {
        criteria = '';
      }
      if ((criteria != null) && typeof criteria === 'function') {
        return this.select(criteria).count() > 0;
      } else {
        return this.count() > 0;
      }
    };

    PinkmanCollection.prototype.getBy = function(attribute, value) {
      var object;
      if ((attribute != null) && (value != null)) {
        object = new Object;
        object[attribute] = value;
        return this.getByAttributes(object);
      }
    };

    PinkmanCollection.prototype.getByAttributes = function(object) {
      var j, key, len, match, member, ref, value;
      if ((object != null) && typeof object === 'object' && this.any()) {
        ref = this.collection;
        for (j = 0, len = ref.length; j < len; j++) {
          member = ref[j];
          match = true;
          for (key in object) {
            value = object[key];
            if (member[key] !== value) {
              match = false;
            }
          }
          if (match) {
            return member;
          }
        }
      } else {
        return null;
      }
    };

    PinkmanCollection.prototype.getByPinkey = function(pinkey) {
      return this.getBy('pinkey', pinkey);
    };

    PinkmanCollection.prototype.get = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length > 0) {
        if (Pinkman.isNumber(args[0])) {
          return this.getByPinkey(args[0]);
        } else if (args.length === 2) {
          return this.getBy.apply(this, args);
        } else if (typeof args[0] === 'object') {
          return this.getByAttributes(args[0]);
        }
      }
    };

    PinkmanCollection.prototype.find = function(id) {
      var object;
      if (id != null) {
        object = this.getBy('id', id);
        return object;
      }
    };

    PinkmanCollection.prototype.next = function(object) {
      var i;
      i = this.collection.indexOf(object);
      return this.collection[i + 1];
    };

    PinkmanCollection.prototype.prev = function(object) {
      var i;
      i = this.collection.indexOf(object);
      return this.collection[i - 1];
    };

    PinkmanCollection.prototype.logPinkeys = function() {
      return this.each(function(object) {
        return console.log(object.pinkey);
      });
    };

    PinkmanCollection.prototype.uniq = function(callback) {
      var d, duplicated, j, k, len, len1, object, ref;
      if (callback == null) {
        callback = '';
      }
      duplicated = [];
      ref = this.collection;
      for (j = 0, len = ref.length; j < len; j++) {
        object = ref[j];
        this.select(function(matching) {
          if ((object.pinkey != null) && (object.pinkey === matching.pinkey) && (object !== matching)) {
            duplicated.push(matching);
          }
          if ((object.id != null) && (object.id === matching.id) && (object !== matching)) {
            return duplicated.push(matching);
          }
        });
      }
      for (k = 0, len1 = duplicated.length; k < len1; k++) {
        d = duplicated[k];
        this.remove(d);
      }
      return this;
    };

    PinkmanCollection.prototype.fetchFromArray = function(array) {
      var a, j, len, object;
      for (j = 0, len = array.length; j < len; j++) {
        a = array[j];
        object = this.beforeInsertionPrep(a);
        if (this.find(object.id) != null) {
          this.find(object.id).assign(object.attributes());
        } else {
          this.push(object);
        }
      }
      return this;
    };

    PinkmanCollection.prototype.merge = function(collection) {
      if (Pinkman.isArray(collection)) {
        return this.fetchFromArray(collection);
      } else if (typeof collection === 'object' && collection.isPink && collection.isCollection) {
        return this.fetchFromArray(collection.collection);
      }
    };

    PinkmanCollection.prototype["new"] = function(attributes) {
      var object;
      object = new this.config.memberClass;
      object.initialize(attributes);
      this.push(object);
      return object;
    };

    PinkmanCollection.prototype.reload = function(callback) {
      if (callback == null) {
        callback = '';
      }
      if (this.any()) {
        return this.each((function(_this) {
          return function(object) {
            if (object.id != null) {
              return object.reload(function(object) {
                if (object.pinkey === _this.last().pinkey && callback === 'function') {
                  return callback(_this);
                }
              });
            }
          };
        })(this));
      }
    };

    PinkmanCollection.prototype.makeIndex = function() {
      var i, j, len, object, ref;
      if (this.any()) {
        i = 1;
        ref = this.collection;
        for (j = 0, len = ref.length; j < len; j++) {
          object = ref[j];
          object.set("index", i);
          i++;
        }
        return true;
      } else {
        return false;
      }
    };

    PinkmanCollection.prototype.shuffle = function() {
      var currentIndex, randomIndex, results, temporaryValue;
      if (this.any != null) {
        currentIndex = this.collection.length;
        results = [];
        while (0 !== currentIndex) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex = currentIndex - 1;
          temporaryValue = this.collection[currentIndex];
          this.collection[currentIndex] = this.collection[randomIndex];
          results.push(this.collection[randomIndex] = temporaryValue);
        }
        return results;
      }
    };

    PinkmanCollection.prototype.filter = function(attribute, query, callback) {
      var filter, j, len, obj, ref;
      if ((attribute != null) && (query != null) && query !== "" && (typeof attribute === "string")) {
        if (this.any()) {
          filter = new this.constructor;
          ref = this.collection;
          for (j = 0, len = ref.length; j < len; j++) {
            obj = ref[j];
            if (obj[attribute] === query) {
              filter.push(obj);
            } else if ((obj[attribute] != null) && (typeof obj[attribute] === "string") && (obj[attribute] !== "") && (typeof query === "string") && (query !== "") && (obj[field].toLowerCase().indexOf(query.toLowerCase()) > -1)) {
              filter.push(obj);
            }
          }
        }
        if ((callback != null) && typeof callback === 'function') {
          callback(filter);
        }
        return filter;
      } else {
        return false;
      }
    };

    return PinkmanCollection;

  })(window.PinkmanCommon);

}).call(this);




